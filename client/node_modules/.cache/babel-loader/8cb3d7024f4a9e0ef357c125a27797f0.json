{"ast":null,"code":"var _jsxFileName = \"/home/invincix-dell/Desktop/Node/pg-management/client/src/module/user/UserRegister.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object({\n  email: Yup.string('Enter your email').email('Enter a valid email').required('Email is required'),\n  name: Yup.string('Enter your name').required('Name is required')\n});\n\nconst UserRegister = props => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      name: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"name\",\n          label: \"Name\",\n          variant: \"outlined\",\n          helperText: formik.touched.name && formik.errors.name ? formik.errors.name : \"Enter your name\",\n          error: formik.touched.name && Boolean(formik.errors.name),\n          onChange: formik.handleChange,\n          value: formik.values.name,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"email\",\n          label: \"Email\",\n          type: \"email\",\n          variant: \"outlined\",\n          helperText: formik.touched.email && formik.errors.email ? formik.errors.email : \"Enter your email\",\n          onChange: formik.handleChange,\n          value: formik.values.email,\n          error: formik.touched.email && Boolean(formik.errors.email),\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '50px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserRegister, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = UserRegister;\nexport default UserRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserRegister\");","map":{"version":3,"sources":["/home/invincix-dell/Desktop/Node/pg-management/client/src/module/user/UserRegister.js"],"names":["React","TextField","useFormik","Yup","Button","validationSchema","object","email","string","required","name","UserRegister","props","formik","initialValues","onSubmit","values","alert","JSON","stringify","padding","handleSubmit","touched","errors","Boolean","handleChange","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button } from '@mui/material';\n\nconst validationSchema = Yup.object({\n    email: Yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    name: Yup\n        .string('Enter your name')\n        .required('Name is required')\n});\n\nconst UserRegister = (props) => {\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            name: '',\n        },\n        validationSchema: validationSchema,\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <form onSubmit={formik.handleSubmit} autoComplete=\"off\">\n                <div>\n                    <TextField\n                        id=\"name\"\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        helperText={\n                            formik.touched.name && formik.errors.name ?\n                                formik.errors.name : \"Enter your name\"\n                        }\n                        error={formik.touched.name && Boolean(formik.errors.name)}\n                        onChange={formik.handleChange}\n                        value={formik.values.name}\n                        fullWidth\n                    />\n                </div>\n\n                <br />\n\n                <div>\n                    <TextField\n                        id=\"email\"\n                        label=\"Email\"\n                        type=\"email\"\n                        variant=\"outlined\"\n                        helperText={\n                            formik.touched.email && formik.errors.email ?\n                                formik.errors.email : \"Enter your email\"\n                        }\n                        onChange={formik.handleChange}\n                        value={formik.values.email}\n                        error={formik.touched.email && Boolean(formik.errors.email)}\n                        fullWidth\n                    />\n                </div>\n\n                <br />\n\n                <div style={{ marginLeft: '50px' }}>\n                    <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                    >\n                        Register\n                    </Button>\n                </div>\n\n            </form>\n        </div>\n    );\n};\n\nexport default UserRegister"]},"metadata":{},"sourceType":"module"}