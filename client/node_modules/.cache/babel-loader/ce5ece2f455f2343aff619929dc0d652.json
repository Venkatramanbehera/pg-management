{"ast":null,"code":"var _jsxFileName = \"/home/invincix-dell/Desktop/Node/pg-management/client/src/module/user/UserRegister.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst validate = values => {\n  const errors = {}; // for name\n\n  if (!values.name) {\n    errors.name = 'Required';\n  } else if (values.name.length > 15) {\n    errors.name = 'Must be 15 characters or less.';\n  } // for email\n\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Email is incorrect.';\n  }\n\n  return errors;\n};\n\nconst UserRegister = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      name: ''\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"name\",\n          label: \"Name\",\n          variant: \"outlined\",\n          error: formik.errors.name ? true : false,\n          onChange: formik.handleChange,\n          value: formik.values.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: formik.errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"email\",\n          label: \"Email\",\n          type: \"email\",\n          variant: \"outlined\",\n          onChange: formik.handleChange,\n          value: formik.values.email,\n          error: formik.errors.email ? true : false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserRegister, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = UserRegister;\nexport default UserRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserRegister\");","map":{"version":3,"sources":["/home/invincix-dell/Desktop/Node/pg-management/client/src/module/user/UserRegister.js"],"names":["React","TextField","useFormik","Button","validate","values","errors","name","length","email","test","UserRegister","formik","initialValues","onSubmit","alert","JSON","stringify","padding","handleSubmit","handleChange","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport { Button } from '@mui/material';\n\nconst validate = values => {\n    const errors = {}\n\n    // for name\n    if (!values.name) {\n        errors.name = 'Required';\n    }\n    else if (values.name.length > 15) {\n        errors.name = 'Must be 15 characters or less.'\n    }\n    // for email\n    if (!values.email) {\n        errors.email = 'Required'\n    }\n    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Email is incorrect.'\n    }\n\n    return errors;\n}\n\nconst UserRegister = () => {\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            name: '',\n        },\n        validate,\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <form onSubmit={formik.handleSubmit}>\n                <div>\n                    <TextField\n                        id=\"name\"\n                        label=\"Name\"\n                        variant=\"outlined\"\n                        error={formik.errors.name ? true : false}\n                        onChange={formik.handleChange}\n                        value={formik.values.name}\n                    />\n                </div>\n\n\n                <br />\n\n                {\n                    formik.errors.name ?\n                        <div style={{ color: 'red' }}>\n                            {formik.errors.name}\n                        </div> : null\n                }\n                <div>\n                    <TextField\n                        id=\"email\"\n                        label=\"Email\"\n                        type=\"email\"\n                        variant=\"outlined\"\n                        onChange={formik.handleChange}\n                        value={formik.values.email}\n                        error={formik.errors.email ? true : false}\n                    />\n                </div>\n\n                <br />\n\n                {\n                    formik.errors.email ?\n                        <div style={{ color: 'red' }}>\n                            {formik.errors.email}\n                        </div> : null\n                }\n                <Button\n                    variant=\"contained\"\n                    type=\"submit\">\n                    Submit\n                </Button>\n\n            </form>\n        </div>\n    );\n};\n\nexport default UserRegister"]},"metadata":{},"sourceType":"module"}